# This is a basic workflow to help you get started with Actions
name: Infrastructure deploy pipeline

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      ClientName:
        description: 'Client Name'
        required: true
      ClientID:
        description: 'Client ID'
        required: true
      ClientSecret:
        description: 'Client Secret'
        required: true
      TenantID:
        description: 'Tenant ID'
        required: true
      SubscriptionID:
        description: 'Subscription ID'
        required: true
      ResourceGroup:
        description: 'Resource Group'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Scan Install
        run: curl --location https://github.com/accurics/terrascan/releases/download/v1.9.0/terrascan_1.9.0_Linux_x86_64.tar.gz --output terrascan.tar.gz && tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz && install terrascan /usr/local/bin && rm terrascan && terrascan     
                     
      - name: Run Terrascan Scan
        run: terrascan scan -t azure
        continue-on-error: true

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          echo ${{ inputs.ClientID }}
          echo ${{ inputs.ClientSecret }}
          echo ${{ inputs.TenantID }}
          echo ${{ inputs.ResourceGroup }}
          echo ${{ inputs.SubscriptionID }}
          echo ${{ inputs.ClientName }}

      - name: "Setting Environment"
        run: |
          echo "ARM_CLIENT_ID=${{ inputs.ClientID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ inputs.ClientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ inputs.SubscriptionID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ inputs.TenantID }}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP =${{ inputs.ResourceGroup }}" >> $GITHUB_ENV
          echo "TFSTATE_RG=koushikpurva-RG" >> $GITHUB_ENV
          echo "TFSTATE_STORAGE_ACCOUNT=goaad" >> $GITHUB_ENV
          echo "TFSTATE_CONTAINER=terracontainer" >> $GITHUB_ENV
          echo "TFSTATE_KEY=${{ inputs.ClientName }}" >> $GITHUB_ENV

      - name: Login to azure
        uses: azure/login@v1
        with:
           creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'
           enable-AzPSSession: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5
          terraform_wrapper: false

      - name: Terraform Init 
        run: terraform init -reconfigure -force-copy -backend-config="resource_group_name=$TFSTATE_RG" -backend-config="storage_account_name=$TFSTATE_STORAGE_ACCOUNT" -backend-config="container_name=$TFSTATE_CONTAINER" -backend-config="$TFSTATE_KEY.tfstate" -input=false
      
      - name: Terraform validate
        run: terraform validate

      - name: Terraform Plan 
        run: terraform plan -var="resource_group_name=$RESOURCE_GROUP" -input=false

  terraformApply:
    name: 'terraformApply'
    runs-on: ubuntu-latest
    needs: ["terraform"]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Setting Environment"
        run: |
          echo "ARM_CLIENT_ID=${{ inputs.ClientID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ inputs.ClientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ inputs.SubscriptionID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ inputs.TenantID }}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP =${{ inputs.ResourceGroup }}" >> $GITHUB_ENV
          echo "TFSTATE_RG=koushikpurva-RG" >> $GITHUB_ENV
          echo "TFSTATE_STORAGE_ACCOUNT=goaad" >> $GITHUB_ENV
          echo "TFSTATE_CONTAINER=terracontainer" >> $GITHUB_ENV
          echo "TFSTATE_KEY=${{ inputs.ClientName }}" >> $GITHUB_ENV

      - name: Login to azure
        uses: azure/login@v1
        with:
           creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'
           enable-AzPSSession: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5
          terraform_wrapper: false

      - name: Terraform Init 
        run: terraform init -reconfigure -force-copy -backend-config="resource_group_name=$TFSTATE_RG" -backend-config="storage_account_name=$TFSTATE_STORAGE_ACCOUNT" -backend-config="container_name=$TFSTATE_CONTAINER" -backend-config="$TFSTATE_KEY.tfstate" -input=false
      
      - name: Terraform Apply 
        # run: terraform apply -auto-approve -var "resource_group_name=$RESOURCE_GROUP" -input=false
        run: terraform apply -auto-approve -var="resource_group_name=$RESOURCE_GROUP" -input=false

      # - name: Terraform Output 
      #   run: vm=$(terraform output) && echo $vm > terraform-output1.ps1  &&  cat terraform-output1.ps1

  # fetchPublishProfile:
  #   name: 'fetchPublishProfile'
  #   runs-on: ubuntu-latest
  #   needs: ["terraformApply"]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: "Setting Environment"
  #       run: |
  #         echo "ARM_CLIENT_ID=${{ inputs.ClientID }}" >> $GITHUB_ENV
  #         echo "ARM_CLIENT_SECRET=${{ inputs.ClientSecret }}" >> $GITHUB_ENV
  #         echo "ARM_SUBSCRIPTION_ID=${{ inputs.SubscriptionID }}" >> $GITHUB_ENV
  #         echo "ARM_TENANT_ID=${{ inputs.TenantID }}" >> $GITHUB_ENV
  #         echo "RESOURCE_GROUP =${{ inputs.ResourceGroup }}" >> $GITHUB_ENV
  #         echo "TFSTATE_RG=test-rg-storage-account" >> $GITHUB_ENV
  #         echo "TFSTATE_STORAGE_ACCOUNT=test-storage-account" >> $GITHUB_ENV
  #         echo "TFSTATE_CONTAINER=test-storage-account-tfstate" >> $GITHUB_ENV
        
  #     - name: Login to azure
  #       uses: azure/login@v1
  #       with:
  #          creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'
  #          enable-AzPSSession: true

  #     - name: Run PS Commands
  #       uses: azure/powershell@v1
  #       with:
  #         inlineScript: |
  #           $profile1 = Get-AzWebAppPublishingProfile -Name "Name-of-the-function-app-1" -ResourceGroupName "${{ env.RESOURCE_GROUP }}" 
  #           $profile2 = Get-AzWebAppPublishingProfile -Name "Name-of-the-function-app-2" -ResourceGroupName "${{ env.RESOURCE_GROUP }}"
  #           $profile1 | Export-Clixml -Path "profile1.xml"
  #           $profile2 | Export-Clixml -Path "profile2.xml"
  #         azPSVersion: "latest"

  #     - name: Uploading publish profiles
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: publishing-profiles
  #         path: |
  #           profile1.xml
  #           profile2.xml

  # TriggerCodeDeployPipeline:
  #   name: 'TriggerCodeDeployPipeline'
  #   runs-on: ubuntu-latest
  #   needs: ["fetchPublishProfile"]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Download publishing profiles
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: publishing-profiles

  #     # - name: Run PS Commands
  #     #   uses: azure/powershell@v1
  #     #   with:
  #     #     inlineScript: |
  #     #       $profile1 = Import-Clixml -Path "profile1.xml"
  #     #       $profile2 = Import-Clixml -Path "profile2.xml"
  #     #     azPSVersion: "latest"

  #     - name: Use publishing profiles
  #       run: |
  #         profile1=$(cat profile1.xml)
  #         profile2=$(cat profile2.xml)

  #         body='{"ref":"main","inputs":{"AutoparkFunctionality":"${profile1}","AutoparkScheduler":"${profile2}"}}'
          
  #         curl --location 'https://api.github.com/repos/<repo-owner>/<repo-name>/actions/workflows/<workflow-name>/dispatches' \
  #         --header 'Accept: application/vnd.github+json' \
  #         --header 'Authorization: Bearer ${{ secrets.GITHUB_PAT_TOKEN }}' \
  #         --header 'X-GitHub-Api-Version: 2022-11-28' \
  #         --header 'Content-Type: application/json' \
  #         --data '${body}'
